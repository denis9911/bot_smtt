from telebot import types
from create_bot import bot, ScheduleStates
from datetime import datetime as dt
from openpyxl import load_workbook
import os
import docx

if os.path.exists(r'\\192.168.0.5\pool1\user\–ú–∏–ª–ª–µ—Ä –ö.–ú\tgbot\raspisanie.xlsx'):
    lw = load_workbook(filename=r'\\192.168.0.5\pool1\user\–ú–∏–ª–ª–µ—Ä –ö.–ú\tgbot\raspisanie.xlsx')
    sheet_full = lw.active  # –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç


@bot.message_handler(state=ScheduleStates.full_list_changes)
def full_list_changes(message):
    path = r'\\192.168.0.5\pool1\user\–ú–∏–ª–ª–µ—Ä –ö.–ú\tgbot'
    files = []
    word_from_doc = []
    word_final = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    for folder in os.listdir(path):
        if message.text.lower() in folder:
            files.append(os.path.join(path, folder))
    if len(files) < 1:
        if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.delete_state(message.from_user.id, message.chat.id)
            return bot.send_message(message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        else:
            return bot.send_message(message.chat.id,
                                    text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...')
    doc_file = docx.Document(files[0])
    for tables in doc_file.tables:
        for row in tables.rows:
            for cell in row.cells:
                word_from_doc.append(cell.text)
    for word_index in range(0, len(word_from_doc), 4):
        word_final.append('\n'.join(word_from_doc[
                                    word_index:word_index + 4]) + f'\n{"-" * 30}\n')  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –≤ 1, –≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    bot.send_message(message.chat.id, ''.join(word_final))


@bot.message_handler(state=ScheduleStates.week_in_a_row)
def week_in_a_row(message):
    week_number = dt.strftime(dt.now(), '%W')

    def parity_week_next():
        markup = types.ReplyKeyboardMarkup(row_width=2)
        btn1 = types.KeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        btn2 = types.KeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫')
        btn3 = types.KeyboardButton('–°—Ä–µ–¥–∞')
        btn4 = types.KeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥')
        btn5 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞')
        btn6 = types.KeyboardButton('–°—É–±–±–æ—Ç–∞')
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', reply_markup=markup)
        bot.set_state(message.from_user.id, ScheduleStates.day_of_the_week, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['parity_week'] = parity_week

    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.send_message(message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑', reply_markup=markup)
        bot.delete_state(message.from_user.id, message.chat.id)
    elif message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è' or message.text == '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è':
        if message.text == '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                week_number = int(week_number) + 1
                data['week_number'] = week_number
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                week_number = int(week_number)
                data['week_number'] = week_number
        if int(week_number) % 2 == 0:
            parity_week = '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å'
        else:
            parity_week = '—á–∏—Å–ª–∏—Ç–µ–ª—å'
        parity_week_next()
    else:
        bot.send_message(message.chat.id,
                         text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...')


@bot.message_handler(state=ScheduleStates.day_of_the_week)
def day_of_the_week(message):
    week_count = []

    def day_week_next():
        markup = types.ReplyKeyboardMarkup(row_width=2)
        btn1 = types.KeyboardButton('1 –∫—É—Ä—Å')
        btn2 = types.KeyboardButton('2 –∫—É—Ä—Å')
        btn3 = types.KeyboardButton('3 –∫—É—Ä—Å')
        btn4 = types.KeyboardButton('4 –∫—É—Ä—Å')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:', reply_markup=markup)
        bot.set_state(message.from_user.id, ScheduleStates.group_select, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['week_count'] = week_count
            data['user_day'] = message.text

    def append_week(integer1, integer2):
        week_count.append(integer1), week_count.append(integer2)

    if message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        append_week(9, 17)
        day_number(message, 1)
        day_week_next()
    elif message.text == '–í—Ç–æ—Ä–Ω–∏–∫':
        append_week(18, 26)
        day_number(message, 2)
        day_week_next()
    elif message.text == '–°—Ä–µ–¥–∞':
        append_week(28, 36)
        day_number(message, 3)
        day_week_next()
    elif message.text == '–ß–µ—Ç–≤–µ—Ä–≥':
        append_week(37, 45)
        day_number(message, 4)
        day_week_next()
    elif message.text == '–ü—è—Ç–Ω–∏—Ü–∞':
        append_week(46, 54)
        day_number(message, 5)
        day_week_next()
    elif message.text == '–°—É–±–±–æ—Ç–∞':
        append_week(55, 61)
        day_number(message, 6)
        day_week_next()
    else:
        bot.send_message(message.chat.id,
                         text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...')


@bot.message_handler(state=ScheduleStates.group_select)
def group_select(message):
    bot.send_message(message.chat.id, text='–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...')
    groups = []
    buttons = []
    # –ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º –∫—É—Ä—Å–æ–º, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∏
    if message.text[0] == '1' or message.text[0] == '2' or message.text[0] == '3' or message.text[0] == '4':
        for rows in sheet_full.iter_rows(min_row=8, max_row=8):
            for cell in rows:
                if cell.value is not None:
                    if str(message.text[0]) in cell.value[0][0]:
                        groups.append(cell.value)
                        buttons.append(types.KeyboardButton(cell.value))  # –ü–æ–ª—É—á–∏–ª–∏ –∑–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –Ω—É–∂–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        markup = types.ReplyKeyboardMarkup()
        markup.add(*buttons)
        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É:', reply_markup=markup)
        bot.set_state(message.from_user.id, ScheduleStates.raspisanie, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['groups'] = groups
    else:
        bot.send_message(message.chat.id,
                         text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...')


@bot.message_handler(state=ScheduleStates.raspisanie)
def raspisanie(message):
    bot.send_message(message.chat.id, text='–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞...')
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if message.text in data['groups']:
            data['user_group'] = message.text
            group_letter = ''
            for i in sheet_full.iter_rows(8, 8,
                                          max_col=50):  # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ, –∏—â–µ–º –≤ 8 —Å—Ç—Ä–æ–∫–µ(–≥–¥–µ –≤—Å–µ –≥—Ä—É–ø–ø—ã) –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏
                for j in i:
                    if message.text == j.value:
                        group_letter = j.column_letter  # –ü–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
            list_lents = []
            list_chislitel = []
            list_znamenatel = []
            count_chislitel = 1
            count_znamenatel = 1
            for i in range(data['week_count'][0], data['week_count'][1], 2):
                list_chislitel.append(sheet_full[group_letter + str(i)].value)
            for i in range(data['week_count'][0] + 1, data['week_count'][1], 2):
                list_znamenatel.append(sheet_full[group_letter + str(i)].value)
            # –ï—Å–ª–∏ —á–∏—Å–ª–∏—Ç–µ–ª—å, —Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø–µ—á–∞—Ç–∞–µ–º ü™ü, –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –ø–µ—á–∞—Ç–∞–µ–º –µ–≥–æ
            if data['parity_week'] == '—á–∏—Å–ª–∏—Ç–µ–ª—å':
                for i in range(len(list_chislitel)):
                    if type(list_chislitel[i]) == str:
                        list_lents.append(
                            f'{count_chislitel} –ø–∞—Ä–∞ - {list_chislitel[i]}\n{"-" * 30}')  # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–¥—Ä—è–¥ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω–µ–¥–µ–ª—è –ø–æ —á–∏—Å–ª–∏—Ç–µ–ª—é
                        count_chislitel += 1  # –ö–∞–∫–∞—è –ø–æ —Å—á—ë—Ç—É –ø–∞—Ä–∞
                    else:
                        list_lents.append(
                            f'{count_chislitel} –ø–∞—Ä–∞ - ‚ùå‚ùå‚ùå\n{"-" * 30}')  # –ï—Å–ª–∏ None
                        count_chislitel += 1
            # –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–∞—è, —Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–µ NoneType, —Ç–æ –ø–µ—á–∞—Ç–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑ —á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –∏ —Ç–∞–º –∏ —Ç–∞–º –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–æ ‚ùå‚ùå‚ùå
            if data['parity_week'] == '–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å':
                for i in range(len(list_znamenatel)):
                    # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ NoneType
                    if type(list_znamenatel[i]) == str:
                        list_lents.append(f'{count_znamenatel} –ø–∞—Ä–∞ - {list_znamenatel[i]}\n{"-" * 30}')
                        count_znamenatel += 1
                    # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è NoneType, –Ω–æ –≤ —á–∏—Å–ª–∏—Ç–µ–ª–µ –µ—Å—Ç—å –ø–∞—Ä—ã, —Ç–æ –ø–µ—á–∞—Ç–∞–µ–º —á–∏—Å–ª–∏—Ç–µ–ª—å
                    elif type(list_znamenatel[i]) != str and type(list_chislitel[i]) == str:
                        list_lents.append(f'{count_znamenatel} –ø–∞—Ä–∞ - {list_chislitel[i]}\n{"-" * 30}')
                        count_znamenatel += 1
                    # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ NoneType –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –ø–∞—Ä—ã –Ω–µ—Ç
                    else:
                        list_lents.append(f'{count_znamenatel} –ø–∞—Ä–∞ - ‚ùå‚ùå‚ùå\n{"-" * 30}')
                        count_znamenatel += 1
            izmenenia(message)
            user_selected_date_raw = f'{dt.now().strftime("%Y")}-{data["week_number"]}-{data["day_number"]}'
            user_selected_date = dt.strptime(user_selected_date_raw, '%Y-%U-%w')
            perenos = '\n'  # f-—Å—Ç—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à
            bot.send_message(message.chat.id,
                             text=f'\n{data["user_group"]}, {user_selected_date.strftime("%d.%m.%Y")} ({data["user_day"]}), {data["parity_week"].title()}\n{"-" * 30}\n{perenos.join(list_lents)}')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(message.chat.id, text='–ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)
        else:
            return bot.send_message(message.chat.id,
                                    text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...')
    bot.delete_state(message.from_user.id, message.chat.id)


# —É—Ç–∏–ª. —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def izmenenia(message):
    path = r'\\192.168.0.5\pool1\user\–ú–∏–ª–ª–µ—Ä –ö.–ú\tgbot'  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É
    files = []
    word = []
    user_group_rows = []
    for root, d, folder in os.walk(path):
        for doc in folder:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if data['user_day'].lower() in doc:
                    files.append(os.path.join(root, doc))
    if len(files) > 0:
        doc_file = docx.Document(files[0])
        for tables in doc_file.tables:
            for row in tables.rows:
                for cell in row.cells:
                    word.append(cell.text)
            for i in range(len(word)):
                if message.text[:6] in word[i]:
                    user_group_rows.append(word[i - 1:i + 3])
        if len(user_group_rows) > 0:
            for rows in user_group_rows:
                new_line_char = '\n'
                bot.send_message(message.chat.id,
                                 text=f'*–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n{new_line_char.join(rows)}*',
                                 parse_mode='Markdown')
        else:
            return bot.send_message(message.chat.id, text='*–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç*',
                                    parse_mode='Markdown')
    else:
        return bot.send_message(message.chat.id, text='*–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–µ—Ç*',
                                parse_mode='Markdown')


def day_number(message, num):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['day_number'] = num
